From ddb72dbec9a4fa6ffd565d4f03dc251486f84507 Mon Sep 17 00:00:00 2001
From: Janmm14 <computerjanimaus@yahoo.de>
Date: Wed, 17 Feb 2016 22:29:54 +0100
Subject: Use java 8 and java 8 api.

Based on https://github.com/WaterfallMC/Waterfall/commit/5a8f65afe1b74a0a2d6df356f21b1ac5b75614da by @Techcable and https://github.com/WaterfallMC/Waterfall/commit/b07b54397bdcaa6be52f6178501155e8a5a07020 by @kashike
---
 .travis.yml                                        |   2 -
 .../net/md_5/bungee/command/PlayerCommand.java     |  20 +-
 .../src/main/java/net/md_5/bungee/Bootstrap.java   |   4 +-
 .../bungee/module/cmd/server/CommandServer.java    |  22 +-
 pom.xml                                            |  29 +--
 .../src/main/java/net/md_5/bungee/BungeeCord.java  |  51 ++---
 .../java/net/md_5/bungee/BungeeServerInfo.java     |  17 +-
 .../java/net/md_5/bungee/ServerConnection.java     |   9 +-
 .../main/java/net/md_5/bungee/UserConnection.java  |  57 ++---
 .../net/md_5/bungee/connection/InitialHandler.java | 248 +++++++++------------
 .../main/java/net/md_5/bungee/http/HttpClient.java |  25 +--
 .../java/net/md_5/bungee/module/ModuleManager.java |   9 +-
 .../net/md_5/bungee/scheduler/BungeeScheduler.java |  10 +-
 .../net/md_5/bungee/scheduler/SchedulerTest.java   |  20 +-
 14 files changed, 180 insertions(+), 343 deletions(-)

diff --git a/.travis.yml b/.travis.yml
index 1cd525b..53ac3fe 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,8 +1,6 @@
 sudo: false
 language: java
 jdk:
-  - openjdk7
-  - oraclejdk7
   - oraclejdk8
 notifications:
   email: false
diff --git a/api/src/main/java/net/md_5/bungee/command/PlayerCommand.java b/api/src/main/java/net/md_5/bungee/command/PlayerCommand.java
index c9f9576..51b44c4 100644
--- a/api/src/main/java/net/md_5/bungee/command/PlayerCommand.java
+++ b/api/src/main/java/net/md_5/bungee/command/PlayerCommand.java
@@ -3,6 +3,7 @@ package net.md_5.bungee.command;
 import com.google.common.base.Function;
 import com.google.common.base.Predicate;
 import com.google.common.collect.Iterables;
+import java.util.stream.Collectors;
 import net.md_5.bungee.api.CommandSender;
 import net.md_5.bungee.api.ProxyServer;
 import net.md_5.bungee.api.connection.ProxiedPlayer;
@@ -30,20 +31,9 @@ public abstract class PlayerCommand extends Command implements TabExecutor
     public Iterable<String> onTabComplete(CommandSender sender, String[] args)
     {
         final String lastArg = ( args.length > 0 ) ? args[args.length - 1].toLowerCase() : "";
-        return Iterables.transform( Iterables.filter( ProxyServer.getInstance().getPlayers(), new Predicate<ProxiedPlayer>()
-        {
-            @Override
-            public boolean apply(ProxiedPlayer player)
-            {
-                return player.getName().toLowerCase().startsWith( lastArg );
-            }
-        } ), new Function<ProxiedPlayer, String>()
-        {
-            @Override
-            public String apply(ProxiedPlayer player)
-            {
-                return player.getName();
-            }
-        } );
+        return ProxyServer.getInstance().getPlayers().stream()
+                .map( CommandSender::getName )
+                .filter( name -> name.toLowerCase().startsWith( lastArg ) )
+                .collect( Collectors.toList() );
     }
 }
diff --git a/bootstrap/src/main/java/net/md_5/bungee/Bootstrap.java b/bootstrap/src/main/java/net/md_5/bungee/Bootstrap.java
index 4b9d2dd..e3aecc5 100644
--- a/bootstrap/src/main/java/net/md_5/bungee/Bootstrap.java
+++ b/bootstrap/src/main/java/net/md_5/bungee/Bootstrap.java
@@ -5,9 +5,9 @@ public class Bootstrap
 
     public static void main(String[] args) throws Exception
     {
-        if ( Float.parseFloat( System.getProperty( "java.class.version" ) ) < 51.0 )
+        if ( Float.parseFloat( System.getProperty( "java.class.version" ) ) < 52.0 )
         {
-            System.err.println( "*** ERROR *** FlexPipe requires Java 7 or above to function! Please download and install it!" );
+            System.err.println( "*** ERROR *** FlexPipe requires Java 8 or above to function! Please download and install it!" );
             System.out.println( "You can check your Java version with the command: java -version" );
             return;
         }
diff --git a/module/cmd-server/src/main/java/net/md_5/bungee/module/cmd/server/CommandServer.java b/module/cmd-server/src/main/java/net/md_5/bungee/module/cmd/server/CommandServer.java
index 36da83e..f93ae19 100644
--- a/module/cmd-server/src/main/java/net/md_5/bungee/module/cmd/server/CommandServer.java
+++ b/module/cmd-server/src/main/java/net/md_5/bungee/module/cmd/server/CommandServer.java
@@ -5,6 +5,7 @@ import com.google.common.base.Predicate;
 import com.google.common.collect.Iterables;
 import java.util.Collections;
 import java.util.Map;
+import java.util.stream.Collectors;
 import net.md_5.bungee.api.CommandSender;
 import net.md_5.bungee.api.ProxyServer;
 import net.md_5.bungee.api.config.ServerInfo;
@@ -78,22 +79,11 @@ public class CommandServer extends Command implements TabExecutor
     @Override
     public Iterable<String> onTabComplete(final CommandSender sender, final String[] args)
     {
-        return ( args.length > 1 ) ? Collections.EMPTY_LIST : Iterables.transform( Iterables.filter( ProxyServer.getInstance().getServers().values(), new Predicate<ServerInfo>()
-        {
-            private final String lower = ( args.length == 0 ) ? "" : args[0].toLowerCase();
+        final String lower = ( args.length == 0 ) ? "" : args[0].toLowerCase();
 
-            @Override
-            public boolean apply(ServerInfo input)
-            {
-                return input.getName().toLowerCase().startsWith( lower ) && input.canAccess( sender );
-            }
-        } ), new Function<ServerInfo, String>()
-        {
-            @Override
-            public String apply(ServerInfo input)
-            {
-                return input.getName();
-            }
-        } );
+        return ( args.length > 1 ) ? Collections.EMPTY_LIST : ProxyServer.getInstance().getServers().values().stream()
+                .filter( input -> input.getName().toLowerCase().startsWith( lower ) && input.canAccess( sender ) )
+                .map( ServerInfo::getName )
+                .collect( Collectors.toList() );
     }
 }
diff --git a/pom.xml b/pom.xml
index babc3bf..e9e359a 100644
--- a/pom.xml
+++ b/pom.xml
@@ -73,8 +73,8 @@
     <properties>
         <build.number>unknown</build.number>
         <netty.version>4.0.40.Final</netty.version>
-        <maven.compiler.source>1.7</maven.compiler.source>
-        <maven.compiler.target>1.7</maven.compiler.target>
+        <maven.compiler.source>1.8</maven.compiler.source>
+        <maven.compiler.target>1.8</maven.compiler.target>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
         <origin_commit>unknown</origin_commit>
         <patcher_commit>unknown</patcher_commit>
@@ -111,31 +111,6 @@
     <build>
         <plugins>
             <plugin>
-                <groupId>org.codehaus.mojo</groupId>
-                <artifactId>animal-sniffer-maven-plugin</artifactId>
-                <version>1.13</version>
-                <executions>
-                    <execution>
-                        <phase>process-classes</phase>
-                        <goals>
-                            <goal>check</goal>
-                        </goals>
-                    </execution>
-                </executions>
-                <configuration>
-                    <ignores>
-                        <ignore>java.lang.ClassLoader</ignore>
-                        <ignore>java.lang.Throwable</ignore>
-                        <ignore>java.util.Locale</ignore>
-                    </ignores>
-                    <signature>
-                        <groupId>org.codehaus.mojo.signature</groupId>
-                        <artifactId>java16</artifactId>
-                        <version>1.1</version>
-                    </signature>
-                </configuration>
-            </plugin>
-            <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-javadoc-plugin</artifactId>
                 <!-- 2.10+ claimed to be broken says FlexPipe -->
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index 8dec98f..eb5a3d8 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -14,6 +14,7 @@ import java.io.InputStream;
 import java.io.OutputStream;
 import java.util.Properties;
 import java.util.PropertyResourceBundle;
+import java.util.stream.Collectors;
 import net.md_5.bungee.api.Favicon;
 import net.md_5.bungee.api.ServerPing;
 import net.md_5.bungee.api.Title;
@@ -337,19 +338,14 @@ public class BungeeCord extends ProxyServer
     {
         for ( final ListenerInfo info : config.getListeners() )
         {
-            ChannelFutureListener listener = new ChannelFutureListener()
-            {
-                @Override
-                public void operationComplete(ChannelFuture future) throws Exception
+            ChannelFutureListener listener = future -> {
+                if ( future.isSuccess() )
                 {
-                    if ( future.isSuccess() )
-                    {
-                        listeners.add( future.channel() );
-                        getLogger().log( Level.INFO, "Listening on {0}", info.getHost() );
-                    } else
-                    {
-                        getLogger().log( Level.WARNING, "Could not bind to host " + info.getHost(), future.cause() );
-                    }
+                    listeners.add( future.channel() );
+                    getLogger().log( Level.INFO, "Listening on {0}", info.getHost() );
+                } else
+                {
+                    getLogger().log( Level.WARNING, "Could not bind to host " + info.getHost(), future.cause() );
                 }
             };
             new ServerBootstrap()
@@ -363,19 +359,14 @@ public class BungeeCord extends ProxyServer
 
             if ( info.isQueryEnabled() )
             {
-                ChannelFutureListener bindListener = new ChannelFutureListener()
-                {
-                    @Override
-                    public void operationComplete(ChannelFuture future) throws Exception
+                ChannelFutureListener bindListener = future -> {
+                    if ( future.isSuccess() )
                     {
-                        if ( future.isSuccess() )
-                        {
-                            listeners.add( future.channel() );
-                            getLogger().log( Level.INFO, "Started query on {0}", future.channel().localAddress() );
-                        } else
-                        {
-                            getLogger().log( Level.WARNING, "Could not bind to host " + info.getHost(), future.cause() );
-                        }
+                        listeners.add( future.channel() );
+                        getLogger().log( Level.INFO, "Started query on {0}", future.channel().localAddress() );
+                    } else
+                    {
+                        getLogger().log( Level.WARNING, "Could not bind to host " + info.getHost(), future.cause() );
                     }
                 };
                 new RemoteQuery( this, info ).start( PipelineUtils.getDatagramChannel(), new InetSocketAddress( info.getHost().getAddress(), info.getQueryPort() ), eventLoops, bindListener );
@@ -721,15 +712,9 @@ public class BungeeCord extends ProxyServer
             return Collections.singleton( exactMatch );
         }
 
-        return Sets.newHashSet( Iterables.filter( getPlayers(), new Predicate<ProxiedPlayer>()
-        {
-
-            @Override
-            public boolean apply(ProxiedPlayer input)
-            {
-                return ( input == null ) ? false : input.getName().toLowerCase().startsWith( partialName.toLowerCase() );
-            }
-        } ) );
+        return getPlayers().stream()
+                .filter( input -> input != null && input.getName().toLowerCase().startsWith( partialName.toLowerCase() ) )
+                .collect( Collectors.toSet() );
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java b/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java
index 1dd0aeb..bc33465 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java
@@ -126,18 +126,13 @@ public class BungeeServerInfo implements ServerInfo
     {
         Preconditions.checkNotNull( callback, "callback" );
 
-        ChannelFutureListener listener = new ChannelFutureListener()
-        {
-            @Override
-            public void operationComplete(ChannelFuture future) throws Exception
+        ChannelFutureListener listener = future -> {
+            if ( future.isSuccess() )
+            {
+                future.channel().pipeline().get( HandlerBoss.class ).setHandler( new PingHandler( BungeeServerInfo.this, callback, protocolVersion ) );
+            } else
             {
-                if ( future.isSuccess() )
-                {
-                    future.channel().pipeline().get( HandlerBoss.class ).setHandler( new PingHandler( BungeeServerInfo.this, callback, protocolVersion ) );
-                } else
-                {
-                    callback.done( null, future.cause() );
-                }
+                callback.done( null, future.cause() );
             }
         };
         new Bootstrap()
diff --git a/proxy/src/main/java/net/md_5/bungee/ServerConnection.java b/proxy/src/main/java/net/md_5/bungee/ServerConnection.java
index 8c1260a..555a193 100644
--- a/proxy/src/main/java/net/md_5/bungee/ServerConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/ServerConnection.java
@@ -54,14 +54,7 @@ public class ServerConnection implements Server
 
         if ( !ch.isClosed() )
         {
-            ch.getHandle().eventLoop().schedule( new Runnable()
-            {
-                @Override
-                public void run()
-                {
-                    ch.getHandle().close();
-                }
-            }, 100, TimeUnit.MILLISECONDS );
+            ch.getHandle().eventLoop().schedule( ( Runnable ) () -> ch.getHandle().close(), 100, TimeUnit.MILLISECONDS );
         }
     }
 
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index a5010f3..00d9719 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -299,34 +299,28 @@ public final class UserConnection implements ProxiedPlayer
                 ch.pipeline().get( HandlerBoss.class ).setHandler( new ServerConnector( bungee, UserConnection.this, target ) );
             }
         };
-        ChannelFutureListener listener = new ChannelFutureListener()
-        {
-            @Override
-            @SuppressWarnings("ThrowableResultIgnored")
-            public void operationComplete(ChannelFuture future) throws Exception
+        ChannelFutureListener listener = future -> {
+            if ( callback != null )
             {
-                if ( callback != null )
-                {
-                    callback.done( future.isSuccess(), future.cause() );
-                }
+                callback.done( future.isSuccess(), future.cause() );
+            }
+
+            if ( !future.isSuccess() )
+            {
+                future.channel().close();
+                pendingConnects.remove( target );
 
-                if ( !future.isSuccess() )
+                ServerInfo def = updateAndGetNextServer( target );
+                if ( retry && def != null && ( getServer() == null || def != getServer().getInfo() ) )
                 {
-                    future.channel().close();
-                    pendingConnects.remove( target );
-
-                    ServerInfo def = updateAndGetNextServer( target );
-                    if ( retry && def != null && ( getServer() == null || def != getServer().getInfo() ) )
-                    {
-                        sendMessage( bungee.getTranslation( "fallback_lobby" ) );
-                        connect( def, null, false );
-                    } else if ( dimensionChange )
-                    {
-                        disconnect( bungee.getTranslation( "fallback_kick", future.cause().getClass().getName() ) );
-                    } else
-                    {
-                        sendMessage( bungee.getTranslation( "fallback_kick", future.cause().getClass().getName() ) );
-                    }
+                    sendMessage( bungee.getTranslation( "fallback_lobby" ) );
+                    connect( def, null, false );
+                } else if ( dimensionChange )
+                {
+                    disconnect( bungee.getTranslation( "fallback_kick", future.cause().getClass().getName() ) );
+                } else
+                {
+                    sendMessage( bungee.getTranslation( "fallback_kick", future.cause().getClass().getName() ) );
                 }
             }
         };
@@ -376,17 +370,12 @@ public final class UserConnection implements ProxiedPlayer
             // As such, despite the protocol switch packets already having been sent, there is the possibility of a client side exception
             // To help combat this we will wait half a second before actually sending the disconnected packet so that whoever is on the other
             // end has a somewhat better chance of receiving the proper packet.
-            ch.getHandle().eventLoop().schedule( new Runnable()
-            {
-
-                @Override
-                public void run()
-                {
-                    unsafe().sendPacket( new Kick( ComponentSerializer.toString( reason ) ) );
-                    ch.close();
-                }
+            ch.getHandle().eventLoop().schedule( ( Runnable ) () -> {
+                unsafe().sendPacket( new Kick( ComponentSerializer.toString( reason ) ) );
+                ch.close();
             }, 500, TimeUnit.MILLISECONDS );
 
+
             if ( server != null )
             {
                 server.disconnect( "Quitting" );
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index 2077e31..8cbb9de 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -150,38 +150,33 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                 new ServerPing.Players( listener.getMaxPlayers(), bungee.getOnlineCount(), null ),
                 new TextComponent( TextComponent.fromLegacyText( listener.getMotd() ) ), (Favicon) null );
 
-        Callback<ProxyPingEvent> callback = new Callback<ProxyPingEvent>()
-        {
-            @Override
-            public void done(ProxyPingEvent result, Throwable error)
+        Callback<ProxyPingEvent> callback = (result, error) -> {
+            if ( ch.isClosed() )
             {
-                if ( ch.isClosed() )
-                {
-                    return;
-                }
-
-                ServerPing legacy = result.getResponse();
-                String kickMessage;
+                return;
+            }
 
-                if ( v1_5 )
-                {
-                    kickMessage = ChatColor.DARK_BLUE
-                            + "\00" + 127
-                            + '\00' + legacy.getVersion().getName()
-                            + '\00' + getFirstLine( legacy.getDescription() )
-                            + '\00' + legacy.getPlayers().getOnline()
-                            + '\00' + legacy.getPlayers().getMax();
-                } else
-                {
-                    // Clients <= 1.3 don't support colored motds because the color char is used as delimiter
-                    kickMessage = ChatColor.stripColor( getFirstLine( legacy.getDescription() ) )
-                            + '\u00a7' + legacy.getPlayers().getOnline()
-                            + '\u00a7' + legacy.getPlayers().getMax();
-                }
+            ServerPing legacy1 = result.getResponse();
+            String kickMessage;
 
-                ch.getHandle().writeAndFlush( kickMessage );
-                ch.close();
+            if ( v1_5 )
+            {
+                kickMessage = ChatColor.DARK_BLUE
+                        + "\00" + 127
+                        + '\00' + legacy1.getVersion().getName()
+                        + '\00' + getFirstLine( legacy1.getDescription() )
+                        + '\00' + legacy1.getPlayers().getOnline()
+                        + '\00' + legacy1.getPlayers().getMax();
+            } else
+            {
+                // Clients <= 1.3 don't support colored motds because the color char is used as delimiter
+                kickMessage = ChatColor.stripColor( getFirstLine( legacy1.getDescription() ) )
+                        + '\u00a7' + legacy1.getPlayers().getOnline()
+                        + '\u00a7' + legacy1.getPlayers().getMax();
             }
+
+            ch.getHandle().writeAndFlush( kickMessage );
+            ch.close();
         };
 
         bungee.getPluginManager().callEvent( new ProxyPingEvent( this, legacy, callback ) );
@@ -201,30 +196,20 @@ public class InitialHandler extends PacketHandler implements PendingConnection
         ServerInfo forced = AbstractReconnectHandler.getForcedHost( this );
         final String motd = ( forced != null ) ? forced.getMotd() : listener.getMotd();
 
-        Callback<ServerPing> pingBack = new Callback<ServerPing>()
-        {
-            @Override
-            public void done(ServerPing result, Throwable error)
+        Callback<ServerPing> pingBack = (result, error) -> {
+            if ( error != null )
             {
-                if ( error != null )
-                {
-                    result = new ServerPing();
-                    result.setDescription( bungee.getTranslation( "ping_cannot_connect" ) );
-                    bungee.getLogger().log( Level.WARNING, "Error pinging remote server", error );
-                }
+                result = new ServerPing();
+                result.setDescription( bungee.getTranslation( "ping_cannot_connect" ) );
+                bungee.getLogger().log( Level.WARNING, "Error pinging remote server", error );
+            }
 
-                Callback<ProxyPingEvent> callback = new Callback<ProxyPingEvent>()
-                {
-                    @Override
-                    public void done(ProxyPingEvent pingResult, Throwable error)
-                    {
-                        Gson gson = BungeeCord.getInstance().gson;
-                        unsafe.sendPacket( new StatusResponse( gson.toJson( pingResult.getResponse() ) ) );
-                    }
-                };
+            Callback<ProxyPingEvent> callback = (pingResult, error1) -> {
+                Gson gson = BungeeCord.getInstance().gson;
+                unsafe.sendPacket( new StatusResponse( gson.toJson( pingResult.getResponse() ) ) );
+            };
 
-                bungee.getPluginManager().callEvent( new ProxyPingEvent( InitialHandler.this, result, callback ) );
-            }
+            bungee.getPluginManager().callEvent( new ProxyPingEvent( InitialHandler.this, result, callback ) );
         };
 
         if ( forced != null && listener.isPingPassthrough() )
@@ -358,30 +343,24 @@ public class InitialHandler extends PacketHandler implements PendingConnection
             return;
         }
 
-        Callback<PreLoginEvent> callback = new Callback<PreLoginEvent>()
-        {
-
-            @Override
-            public void done(PreLoginEvent result, Throwable error)
+        Callback<PreLoginEvent> callback = (result, error) -> {
+            if ( result.isCancelled() )
             {
-                if ( result.isCancelled() )
-                {
-                    disconnect( result.getCancelReason() );
-                    return;
-                }
-                if ( ch.isClosed() )
-                {
-                    return;
-                }
-                if ( onlineMode )
-                {
-                    unsafe().sendPacket( request = EncryptionUtil.encryptRequest() );
-                } else
-                {
-                    finish();
-                }
-                thisState = State.ENCRYPT;
+                disconnect( result.getCancelReason() );
+                return;
+            }
+            if ( ch.isClosed() )
+            {
+                return;
             }
+            if ( onlineMode )
+            {
+                unsafe().sendPacket( request = EncryptionUtil.encryptRequest() );
+            } else
+            {
+                finish();
+            }
+            thisState = State.ENCRYPT;
         };
 
         // fire pre login event
@@ -413,27 +392,22 @@ public class InitialHandler extends PacketHandler implements PendingConnection
 
         String authURL = "https://sessionserver.mojang.com/session/minecraft/hasJoined?username=" + encName + "&serverId=" + encodedHash;
 
-        Callback<String> handler = new Callback<String>()
-        {
-            @Override
-            public void done(String result, Throwable error)
+        Callback<String> handler = (result, error) -> {
+            if ( error == null )
             {
-                if ( error == null )
-                {
-                    LoginResult obj = BungeeCord.getInstance().gson.fromJson( result, LoginResult.class );
-                    if ( obj != null )
-                    {
-                        loginProfile = obj;
-                        uniqueId = Util.getUUID( obj.getId() );
-                        finish();
-                        return;
-                    }
-                    disconnect( "Not authenticated with Minecraft.net" );
-                } else
+                LoginResult obj = BungeeCord.getInstance().gson.fromJson( result, LoginResult.class );
+                if ( obj != null )
                 {
-                    disconnect( bungee.getTranslation( "mojang_fail" ) );
-                    bungee.getLogger().log( Level.SEVERE, "Error authenticating " + getName() + " with minecraft.net", error );
+                    loginProfile = obj;
+                    uniqueId = Util.getUUID( obj.getId() );
+                    finish();
+                    return;
                 }
+                disconnect( "Not authenticated with Minecraft.net" );
+            } else
+            {
+                disconnect( bungee.getTranslation( "mojang_fail" ) );
+                bungee.getLogger().log( Level.SEVERE, "Error authenticating " + getName() + " with minecraft.net", error );
             }
         };
 
@@ -478,57 +452,47 @@ public class InitialHandler extends PacketHandler implements PendingConnection
             uniqueId = offlineId;
         }
 
-        Callback<LoginEvent> complete = new Callback<LoginEvent>()
-        {
-            @Override
-            public void done(LoginEvent result, Throwable error)
+        Callback<LoginEvent> complete = (result, error) -> {
+            if ( result.isCancelled() )
             {
-                if ( result.isCancelled() )
-                {
-                    disconnect( result.getCancelReason() );
-                    return;
-                }
-                if ( ch.isClosed() )
-                {
-                    return;
-                }
+                disconnect( result.getCancelReason() );
+                return;
+            }
+            if ( ch.isClosed() )
+            {
+                return;
+            }
 
-                ch.getHandle().eventLoop().execute( new Runnable()
+            ch.getHandle().eventLoop().execute( () -> {
+                if ( ch.getHandle().isActive() )
                 {
-                    @Override
-                    public void run()
+                    UserConnection userCon = new UserConnection( bungee, ch, getName(), InitialHandler.this );
+                    userCon.setCompressionThreshold( BungeeCord.getInstance().config.getCompressionThreshold() );
+                    userCon.init();
+
+                    unsafe.sendPacket( new LoginSuccess( getUniqueId().toString(), getName() ) ); // With dashes in between
+                    ch.setProtocol( Protocol.GAME );
+
+                    ch.getHandle().pipeline().get( HandlerBoss.class ).setHandler( new UpstreamBridge( bungee, userCon ) );
+                    bungee.getPluginManager().callEvent( new PostLoginEvent( userCon ) );
+                    ServerInfo server;
+                    if ( bungee.getReconnectHandler() != null )
                     {
-                        if ( ch.getHandle().isActive() )
-                        {
-                            UserConnection userCon = new UserConnection( bungee, ch, getName(), InitialHandler.this );
-                            userCon.setCompressionThreshold( BungeeCord.getInstance().config.getCompressionThreshold() );
-                            userCon.init();
-
-                            unsafe.sendPacket( new LoginSuccess( getUniqueId().toString(), getName() ) ); // With dashes in between
-                            ch.setProtocol( Protocol.GAME );
-
-                            ch.getHandle().pipeline().get( HandlerBoss.class ).setHandler( new UpstreamBridge( bungee, userCon ) );
-                            bungee.getPluginManager().callEvent( new PostLoginEvent( userCon ) );
-                            ServerInfo server;
-                            if ( bungee.getReconnectHandler() != null )
-                            {
-                                server = bungee.getReconnectHandler().getServer( userCon );
-                            } else
-                            {
-                                server = AbstractReconnectHandler.getForcedHost( InitialHandler.this );
-                            }
-                            if ( server == null )
-                            {
-                                server = bungee.getServerInfo( listener.getDefaultServer() );
-                            }
-
-                            userCon.connect( server, null, true );
-
-                            thisState = State.FINISHED;
-                        }
+                        server = bungee.getReconnectHandler().getServer( userCon );
+                    } else
+                    {
+                        server = AbstractReconnectHandler.getForcedHost( InitialHandler.this );
                     }
-                } );
-            }
+                    if ( server == null )
+                    {
+                        server = bungee.getServerInfo( listener.getDefaultServer() );
+                    }
+
+                    userCon.connect( server, null, true );
+
+                    thisState = State.FINISHED;
+                }
+            } );
         };
 
         // fire login event
@@ -552,18 +516,12 @@ public class InitialHandler extends PacketHandler implements PendingConnection
             // As such, despite the protocol switch packets already having been sent, there is the possibility of a client side exception
             // To help combat this we will wait half a second before actually sending the disconnected packet so that whoever is on the other
             // end has a somewhat better chance of receiving the proper packet.
-            ch.getHandle().eventLoop().schedule( new Runnable()
-            {
-
-                @Override
-                public void run()
+            ch.getHandle().eventLoop().schedule( ( Runnable ) () -> {
+                if ( thisState != State.STATUS && thisState != State.PING )
                 {
-                    if ( thisState != State.STATUS && thisState != State.PING )
-                    {
-                        unsafe().sendPacket( new Kick( ComponentSerializer.toString( reason ) ) );
-                    }
-                    ch.close();
+                    unsafe().sendPacket( new Kick( ComponentSerializer.toString( reason ) ) );
                 }
+                ch.close();
             }, 500, TimeUnit.MILLISECONDS );
         }
     }
diff --git a/proxy/src/main/java/net/md_5/bungee/http/HttpClient.java b/proxy/src/main/java/net/md_5/bungee/http/HttpClient.java
index 2feb4d6..b992beb 100644
--- a/proxy/src/main/java/net/md_5/bungee/http/HttpClient.java
+++ b/proxy/src/main/java/net/md_5/bungee/http/HttpClient.java
@@ -71,24 +71,19 @@ public class HttpClient
             addressCache.put( uri.getHost(), inetHost );
         }
 
-        ChannelFutureListener future = new ChannelFutureListener()
-        {
-            @Override
-            public void operationComplete(ChannelFuture future) throws Exception
+        ChannelFutureListener future = future1 -> {
+            if ( future1.isSuccess() )
             {
-                if ( future.isSuccess() )
-                {
-                    String path = uri.getRawPath() + ( ( uri.getRawQuery() == null ) ? "" : "?" + uri.getRawQuery() );
+                String path = uri.getRawPath() + ( ( uri.getRawQuery() == null ) ? "" : "?" + uri.getRawQuery() );
 
-                    HttpRequest request = new DefaultHttpRequest( HttpVersion.HTTP_1_1, HttpMethod.GET, path );
-                    request.headers().set( HttpHeaders.Names.HOST, uri.getHost() );
+                HttpRequest request = new DefaultHttpRequest( HttpVersion.HTTP_1_1, HttpMethod.GET, path );
+                request.headers().set( HttpHeaders.Names.HOST, uri.getHost() );
 
-                    future.channel().writeAndFlush( request );
-                } else
-                {
-                    addressCache.invalidate( uri.getHost() );
-                    callback.done( null, future.cause() );
-                }
+                future1.channel().writeAndFlush( request );
+            } else
+            {
+                addressCache.invalidate( uri.getHost() );
+                callback.done( null, future1.cause() );
             }
         };
 
diff --git a/proxy/src/main/java/net/md_5/bungee/module/ModuleManager.java b/proxy/src/main/java/net/md_5/bungee/module/ModuleManager.java
index 97d6b5e..7a42094 100644
--- a/proxy/src/main/java/net/md_5/bungee/module/ModuleManager.java
+++ b/proxy/src/main/java/net/md_5/bungee/module/ModuleManager.java
@@ -43,14 +43,7 @@ public class ModuleManager
         if ( !proxy.getConfigurationAdapter().getBoolean( "module_download", false ) )
         {
             System.out.println( "Module download is disabled. Skipping." );
-            if ( !Boolean.parseBoolean( System.getProperty( "me.minotopia.flexpipe.ignoreNoModues", "false" ) ) && moduleDirectory.list( new FilenameFilter()
-            {
-                @Override
-                public boolean accept(File dir, String name)
-                {
-                    return dir.equals( moduleDirectory ) && name.toLowerCase().endsWith( ".jar" );
-                }
-            } ).length == 0 )
+            if ( !Boolean.parseBoolean( System.getProperty( "me.minotopia.flexpipe.ignoreNoModues", "false" ) ) && moduleDirectory.list( (dir, name) -> dir.equals( moduleDirectory ) && name.toLowerCase().endsWith( ".jar" ) ).length == 0 )
             {
                 proxy.getLogger().warning( "As you have no modules, download some manually or enable automatic download in config.yml" );
             }
diff --git a/proxy/src/main/java/net/md_5/bungee/scheduler/BungeeScheduler.java b/proxy/src/main/java/net/md_5/bungee/scheduler/BungeeScheduler.java
index 1dc1cc6..0f80ac2 100644
--- a/proxy/src/main/java/net/md_5/bungee/scheduler/BungeeScheduler.java
+++ b/proxy/src/main/java/net/md_5/bungee/scheduler/BungeeScheduler.java
@@ -24,15 +24,7 @@ public class BungeeScheduler implements TaskScheduler
     private final TIntObjectMap<BungeeTask> tasks = TCollections.synchronizedMap( new TIntObjectHashMap<BungeeTask>() );
     private final Multimap<Plugin, BungeeTask> tasksByPlugin = Multimaps.synchronizedMultimap( HashMultimap.<Plugin, BungeeTask>create() );
     //
-    private final Unsafe unsafe = new Unsafe()
-    {
-
-        @Override
-        public ExecutorService getExecutorService(Plugin plugin)
-        {
-            return plugin.getExecutorService();
-        }
-    };
+    private final Unsafe unsafe = plugin -> plugin.getExecutorService();
 
     @Override
     public void cancel(int id)
diff --git a/proxy/src/test/java/net/md_5/bungee/scheduler/SchedulerTest.java b/proxy/src/test/java/net/md_5/bungee/scheduler/SchedulerTest.java
index 25ac372..c2f3a50 100644
--- a/proxy/src/test/java/net/md_5/bungee/scheduler/SchedulerTest.java
+++ b/proxy/src/test/java/net/md_5/bungee/scheduler/SchedulerTest.java
@@ -19,15 +19,7 @@ public class SchedulerTest
 
         final CountDownLatch latch = new CountDownLatch( 1 );
 
-        scheduler.runAsync( DummyPlugin.INSTANCE, new Runnable()
-        {
-
-            @Override
-            public void run()
-            {
-                latch.countDown();
-            }
-        } );
+        scheduler.runAsync( DummyPlugin.INSTANCE, () -> latch.countDown() );
 
         latch.await( 5, TimeUnit.SECONDS );
 
@@ -73,14 +65,6 @@ public class SchedulerTest
 
     private ScheduledTask setup(TaskScheduler scheduler, final AtomicBoolean hasRun)
     {
-        return scheduler.schedule( DummyPlugin.INSTANCE, new Runnable()
-        {
-
-            @Override
-            public void run()
-            {
-                hasRun.set( true );
-            }
-        }, 100, 100, TimeUnit.MILLISECONDS );
+        return scheduler.schedule( DummyPlugin.INSTANCE, () -> hasRun.set( true ), 100, 100, TimeUnit.MILLISECONDS );
     }
 }
-- 
1.9.5.msysgit.0

