From a282037fa69509c11be0b31c1a885c357c8b3170 Mon Sep 17 00:00:00 2001
From: Janmm14 <computerjanimaus@yahoo.de>
Date: Wed, 7 Oct 2015 21:53:26 +0200
Subject: Re-Implement join throttle

This join throttle takes care of pings by kicking in only if its clearly a join try.
This implementation sends a kick message containing the seconds players needs to wait between join attempts.
Additionally it ignores the following LoginRequest of the connection which seems to be send together with the handshake by the client.

Whether throttled join tries are logged can be specified by the log_throttled config.yml option, defaults to false.

Adapted stop of packet processing after disconnect from https://github.com/WaterfallMC/Waterfall/commit/45e4a61df042ad13cf6580b5e7901e55164c438b by @Techcable
---
 .../main/java/net/md_5/bungee/api/ProxyConfig.java |  5 ++++
 .../java/net/md_5/bungee/conf/Configuration.java   |  5 ++++
 .../net/md_5/bungee/connection/InitialHandler.java | 28 +++++++++++++++++++---
 .../java/net/md_5/bungee/netty/PipelineUtils.java  |  6 -----
 proxy/src/main/resources/messages.properties       |  2 ++
 5 files changed, 37 insertions(+), 9 deletions(-)

diff --git a/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java b/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
index edd82c1..25590e3 100644
--- a/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
+++ b/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
@@ -46,6 +46,11 @@ public interface ProxyConfig
     boolean isLogCommands();
 
     /**
+     * Whether we log throttled join attempts
+     */
+    boolean isLogThrottled();
+
+    /**
      * Returns the player max.
      */
     int getPlayerLimit();
diff --git a/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java b/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java
index 25d87d9..f1470ce 100644
--- a/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java
+++ b/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java
@@ -51,6 +51,10 @@ public class Configuration implements ProxyConfig
      * Whether we log proxy commands to the proxy log
      */
     private boolean logCommands;
+    /**
+     * Whether we log throttled join attempts
+     */
+    private boolean logThrottled;
     private int playerLimit = -1;
     private Collection<String> disabledCommands;
     private int throttle = 4000;
@@ -80,6 +84,7 @@ public class Configuration implements ProxyConfig
         uuid = adapter.getString( "stats", uuid );
         onlineMode = adapter.getBoolean( "online_mode", onlineMode );
         logCommands = adapter.getBoolean( "log_commands", logCommands );
+        logThrottled = adapter.getBoolean( "log_throttled", logThrottled );
         playerLimit = adapter.getInt( "player_limit", playerLimit );
         throttle = adapter.getInt( "connection_throttle", throttle );
         ipForward = adapter.getBoolean( "ip_forward", ipForward );
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index dbce941..abad6d1 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -40,6 +40,7 @@ import net.md_5.bungee.netty.PipelineUtils;
 import net.md_5.bungee.netty.cipher.CipherDecoder;
 import net.md_5.bungee.netty.cipher.CipherEncoder;
 import net.md_5.bungee.protocol.DefinedPacket;
+import net.md_5.bungee.protocol.PacketWrapper;
 import net.md_5.bungee.protocol.packet.Handshake;
 import net.md_5.bungee.protocol.packet.PluginMessage;
 import net.md_5.bungee.protocol.packet.EncryptionResponse;
@@ -98,6 +99,13 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     private boolean legacy;
     @Getter
     private String extraDataInHandshake = "";
+    private boolean disconnecting = false;
+
+    @Override
+    public boolean shouldHandle(PacketWrapper packet) throws Exception
+    {
+        return !disconnecting;
+    }
 
     private enum State
     {
@@ -213,7 +221,6 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                     @Override
                     public void done(ProxyPingEvent pingResult, Throwable error)
                     {
-                        BungeeCord.getInstance().getConnectionThrottle().unthrottle( getAddress().getAddress() );
                         Gson gson = BungeeCord.getInstance().gson;
                         unsafe.sendPacket( new StatusResponse( gson.toJson( pingResult.getResponse() ) ) );
                     }
@@ -254,6 +261,20 @@ public class InitialHandler extends PacketHandler implements PendingConnection
         this.handshake = handshake;
         ch.setVersion( handshake.getProtocolVersion() );
 
+        if ( handshake.getRequestedProtocol() == 2 && BungeeCord.getInstance().getConnectionThrottle().throttle( ( ( InetSocketAddress ) ch.getHandle().remoteAddress() ).getAddress() ) )
+        {
+            if ( BungeeCord.getInstance().getConfig().isLogThrottled() )
+            {
+                bungee.getLogger().log( Level.INFO, "{0} throttled", this );
+            }
+            // setting thisState to username to stop possible code execution on repeated handshakes
+            thisState = State.USERNAME;
+            // setting protocol to login so we can send the kick message which is actually supported by the minecraft client after it sent the handshake
+            ch.setProtocol( Protocol.LOGIN );
+            disconnect( bungee.getTranslation( "join_throttle_kick", TimeUnit.MILLISECONDS.toSeconds( BungeeCord.getInstance().getConfig().getThrottle() ) ) );
+            return;
+        }
+
         // Starting with FML 1.8, a "\0FML\0" token is appended to the handshake. This interferes
         // with Bungee's IP forwarding, so we detect it, and remove it from the host string, for now.
         // We know FML appends \00FML\00. However, we need to also consider that other systems might
@@ -285,9 +306,9 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                 ch.setProtocol( Protocol.STATUS );
                 break;
             case 2:
+                // Login
                 thisState = State.USERNAME;
                 ch.setProtocol( Protocol.LOGIN );
-                // Login
                 break;
             default:
                 throw new IllegalArgumentException( "Cannot request protocol " + handshake.getRequestedProtocol() );
@@ -519,8 +540,9 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     @Override
     public void disconnect(final BaseComponent... reason)
     {
-        if ( !ch.isClosed() )
+        if ( !disconnecting || !ch.isClosed() )
         {
+            disconnecting = true;
             // Why do we have to delay this you might ask? Well the simple reason is MOJANG.
             // Despite many a bug report posted, ever since the 1.7 protocol rewrite, the client STILL has a race condition upon switching protocols.
             // As such, despite the protocol switch packets already having been sent, there is the possibility of a client side exception
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
index 4d19bbe..bbcc8df 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
@@ -49,12 +49,6 @@ public class PipelineUtils
         @Override
         protected void initChannel(Channel ch) throws Exception
         {
-            if ( BungeeCord.getInstance().getConnectionThrottle().throttle( ( (InetSocketAddress) ch.remoteAddress() ).getAddress() ) )
-            {
-                // TODO: Better throttle - we can't throttle this way if we want to maintain 1.7 compat!
-                // ch.close();
-                // return;
-            }
 
             BASE.initChannel( ch );
             ch.pipeline().addBefore( FRAME_DECODER, LEGACY_DECODER, new LegacyDecoder() );
diff --git a/proxy/src/main/resources/messages.properties b/proxy/src/main/resources/messages.properties
index 7875037..aad4e95 100644
--- a/proxy/src/main/resources/messages.properties
+++ b/proxy/src/main/resources/messages.properties
@@ -24,3 +24,5 @@ total_players=Total players online: {0}
 name_too_long=Cannot have username longer than 16 characters
 name_invalid=Username contains invalid characters.
 ping_cannot_connect=\u00a7c[Bungee] Can't connect to server.
+
+join_throttle_kick=You have connected too fast. You must wait at least {0} seconds between connections.
-- 
1.9.5.msysgit.0

