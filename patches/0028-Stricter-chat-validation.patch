From e4e096b37f6a88a19e029aa0726e447376425536 Mon Sep 17 00:00:00 2001
From: Janmm14 <computerjanimaus@yahoo.de>
Date: Mon, 21 Mar 2016 03:25:13 +0100
Subject: Stricter chat validation.

Allow chatting only after user has actually joined a server. Forbid empty or whitespace messages. These are not sent by the vanilla minecraft client.

This prevents some joinbot attacks where bots start chatting before they actually joined the target server (real minecraft client would be at some login screen). As the vanilla minecraft client does not send empty or whitespace chat messages, but some bot tools do, this further prevents attacks from badly configured bots.
---
 .../net/md_5/bungee/connection/InitialHandler.java | 11 +++++++++
 .../net/md_5/bungee/connection/UpstreamBridge.java | 27 ++++++++++++++++------
 2 files changed, 31 insertions(+), 7 deletions(-)

diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index 3643bb9..1c8689b 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -20,6 +20,7 @@ import net.md_5.bungee.api.ChatColor;
 import net.md_5.bungee.api.Favicon;
 import net.md_5.bungee.api.ServerPing;
 import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.api.chat.ComponentBuilder;
 import net.md_5.bungee.api.chat.TextComponent;
 import net.md_5.bungee.api.config.ListenerInfo;
 import net.md_5.bungee.api.config.ServerInfo;
@@ -39,6 +40,7 @@ import net.md_5.bungee.netty.cipher.CipherEncoder;
 import net.md_5.bungee.protocol.DefinedPacket;
 import net.md_5.bungee.protocol.PacketWrapper;
 import net.md_5.bungee.protocol.ProtocolConstants;
+import net.md_5.bungee.protocol.packet.Chat;
 import net.md_5.bungee.protocol.packet.Handshake;
 import net.md_5.bungee.protocol.packet.PluginMessage;
 import net.md_5.bungee.protocol.packet.EncryptionResponse;
@@ -624,4 +626,13 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     {
         return !ch.isClosed();
     }
+
+    private static final BaseComponent[] CHAT_TOO_EARLY_DISCONNECT_REASON = new ComponentBuilder( "You may not chat right now." ).color( ChatColor.RED ).create();
+
+    @Override
+    public void handle(Chat chat) throws Exception
+    {
+        // I don't know whether anyone is so dump to send chat messages that early and whether it gets stopped earlier, but this code does not hurt
+        disconnect( CHAT_TOO_EARLY_DISCONNECT_REASON );
+    }
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
index 25143e1..4b0b820 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
@@ -2,9 +2,13 @@ package net.md_5.bungee.connection;
 
 import com.google.common.base.Preconditions;
 import net.md_5.bungee.BungeeCord;
+import net.md_5.bungee.ServerConnection;
 import net.md_5.bungee.UserConnection;
 import net.md_5.bungee.Util;
+import net.md_5.bungee.api.ChatColor;
 import net.md_5.bungee.api.ProxyServer;
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.api.chat.ComponentBuilder;
 import net.md_5.bungee.api.connection.ProxiedPlayer;
 import net.md_5.bungee.api.event.ChatEvent;
 import net.md_5.bungee.api.event.PlayerDisconnectEvent;
@@ -82,16 +86,14 @@ public class UpstreamBridge extends PacketHandler
     }
 
     @Override
-    public boolean shouldHandle(PacketWrapper packet) throws Exception
-    {
-        return con.getServer() != null;
-    }
-
-    @Override
     public void handle(PacketWrapper packet) throws Exception
     {
         con.getEntityRewrite().rewriteServerbound( packet.buf, con.getClientEntityId(), con.getServerEntityId() );
-        con.getServer().getCh().write( packet );
+
+        ServerConnection serverConnection = con.getServer();
+        if (serverConnection != null) {
+            serverConnection.getCh().write( packet );
+        }
     }
 
     @Override
@@ -105,11 +107,22 @@ public class UpstreamBridge extends PacketHandler
         }
     }
 
+    private static final BaseComponent[] CHAT_TOO_EARLY_DISCONNECT_REASON = new ComponentBuilder( "You may not chat right now." ).color( ChatColor.RED ).create();
+
     @Override
     public void handle(Chat chat) throws Exception
     {
+        Preconditions.checkArgument( !chat.getMessage().trim().isEmpty(), "Chat message is invalid" ); // Yes, I'm sorry but these are actually sent out by some bot tools
         Preconditions.checkArgument( chat.getMessage().length() <= 100, "Chat message too long" ); // Mojang limit, check on updates
 
+        // Users can't chat if they were never on a server yet after joining
+        // Users also would get kicked if the command is not handled by the bungee with an npe, but this stops some unneccessary cpu cycles
+        if(con.getServer() == null)
+        {
+            con.disconnect( CHAT_TOO_EARLY_DISCONNECT_REASON );
+            return;
+        }
+
         ChatEvent chatEvent = new ChatEvent( con, con.getServer(), chat.getMessage() );
         if ( !bungee.getPluginManager().callEvent( chatEvent ).isCancelled() )
         {
-- 
1.9.5.msysgit.0

