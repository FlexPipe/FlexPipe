From 7d853a8d97111bec78cb7d06dda03e782c53f18d Mon Sep 17 00:00:00 2001
From: Janmm14 <computerjanimaus@yahoo.de>
Date: Thu, 24 Mar 2016 14:29:14 +0100
Subject: Add SuspiciousPlayerBehaviourEvent

The event gets called after the connection was closed and reports certain actions to plugins so they can primarily identify bot joins. Note that good bots can easily circumvent these checks.
---
 .../api/event/SuspiciousPlayerBehaviourEvent.java  | 36 ++++++++++++++++++++++
 .../net/md_5/bungee/connection/InitialHandler.java |  4 +++
 .../net/md_5/bungee/connection/UpstreamBridge.java | 19 ++++++++++--
 3 files changed, 57 insertions(+), 2 deletions(-)
 create mode 100644 api/src/main/java/me/minotopia/flexpipe/api/event/SuspiciousPlayerBehaviourEvent.java

diff --git a/api/src/main/java/me/minotopia/flexpipe/api/event/SuspiciousPlayerBehaviourEvent.java b/api/src/main/java/me/minotopia/flexpipe/api/event/SuspiciousPlayerBehaviourEvent.java
new file mode 100644
index 0000000..39dfb24
--- /dev/null
+++ b/api/src/main/java/me/minotopia/flexpipe/api/event/SuspiciousPlayerBehaviourEvent.java
@@ -0,0 +1,36 @@
+package me.minotopia.flexpipe.api.event;
+
+import lombok.EqualsAndHashCode;
+import lombok.Getter;
+import lombok.RequiredArgsConstructor;
+import lombok.ToString;
+
+import net.md_5.bungee.api.connection.Connection;
+import net.md_5.bungee.api.connection.PendingConnection;
+import net.md_5.bungee.api.connection.ProxiedPlayer;
+import net.md_5.bungee.api.plugin.Event;
+
+@Getter
+@ToString(callSuper = false)
+@EqualsAndHashCode(callSuper = false)
+@RequiredArgsConstructor
+public class SuspiciousPlayerBehaviourEvent extends Event
+{
+    private final Connection connection;
+    private final Check checkFailed;
+
+    @Getter
+    @RequiredArgsConstructor
+    public enum Check
+    {
+        CHAT_TOO_EARLY( Connection.class ),
+        CHAT_EMPTY( ProxiedPlayer.class ),
+        CHAT_TOO_LONG( ProxiedPlayer.class ),
+        JOIN_THROTTLE_TRIGGERED( PendingConnection.class );
+
+        /**
+         * The class you can safely cast the connection to without any instanceof check.
+         */
+        private final Class<? extends Connection> connectionClass;
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index 71cf563..798ccee 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -1,5 +1,7 @@
 package net.md_5.bungee.connection;
 
+import me.minotopia.flexpipe.api.event.SuspiciousPlayerBehaviourEvent;
+
 import com.google.common.base.Charsets;
 import com.google.common.base.Preconditions;
 import java.math.BigInteger;
@@ -286,6 +288,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
             // setting protocol to login so we can send the kick message which is actually supported by the minecraft client after it sent the handshake
             ch.setProtocol( Protocol.LOGIN );
             disconnect( bungee.getTranslation( "join_throttle_kick", TimeUnit.MILLISECONDS.toSeconds( BungeeCord.getInstance().getConfig().getThrottle() ) ) );
+            BungeeCord.getInstance().getPluginManager().callEvent( new SuspiciousPlayerBehaviourEvent( this, SuspiciousPlayerBehaviourEvent.Check.JOIN_THROTTLE_TRIGGERED ) );
             return;
         }
 
@@ -635,5 +638,6 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     {
         // I don't know whether anyone is so dump to send chat messages that early and whether it gets stopped earlier, but this code does not hurt
         disconnect( CHAT_TOO_EARLY_DISCONNECT_REASON );
+        BungeeCord.getInstance().getPluginManager().callEvent( new SuspiciousPlayerBehaviourEvent( this, SuspiciousPlayerBehaviourEvent.Check.CHAT_TOO_EARLY ) );
     }
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
index d4f5509..afef258 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
@@ -1,5 +1,7 @@
 package net.md_5.bungee.connection;
 
+import me.minotopia.flexpipe.api.event.SuspiciousPlayerBehaviourEvent;
+
 import com.google.common.base.Preconditions;
 import net.md_5.bungee.BungeeCord;
 import net.md_5.bungee.UserConnection;
@@ -106,18 +108,31 @@ public class UpstreamBridge extends PacketHandler
     }
 
     private static final BaseComponent[] CHAT_TOO_EARLY_DISCONNECT_REASON = new ComponentBuilder( "You may not chat right now." ).color( ChatColor.RED ).create();
+    private static final BaseComponent[] CHAT_TOO_LONG_DISCONNECT_REASON = new ComponentBuilder( "Chat message too long." ).color( ChatColor.RED ).create();
+    private static final BaseComponent[] CHAT_INVALID_DISCONNECT_REASON = new ComponentBuilder( "Chat message is invalid." ).color( ChatColor.RED ).create();
 
     @Override
     public void handle(Chat chat) throws Exception
     {
-        Preconditions.checkArgument( !chat.getMessage().trim().isEmpty(), "Chat message is invalid" ); // Yes, I'm sorry but these are actually sent out by some bot tools
-        Preconditions.checkArgument( chat.getMessage().length() <= 100, "Chat message too long" ); // Mojang limit, check on updates
+        if (chat.getMessage().trim().isEmpty()) // Yes, I'm sorry but these are actually sent out by some bot tools
+        {
+            con.disconnect( CHAT_INVALID_DISCONNECT_REASON );
+            BungeeCord.getInstance().getPluginManager().callEvent( new SuspiciousPlayerBehaviourEvent( con, SuspiciousPlayerBehaviourEvent.Check.CHAT_EMPTY ) );
+            return;
+        }
+        if (chat.getMessage().length() > 100) // Mojang limit, check on updates
+        {
+            con.disconnect( CHAT_TOO_LONG_DISCONNECT_REASON );
+            BungeeCord.getInstance().getPluginManager().callEvent( new SuspiciousPlayerBehaviourEvent( con, SuspiciousPlayerBehaviourEvent.Check.CHAT_TOO_LONG ) );
+            return;
+        }
 
         // Users can't chat if they were never on a server yet after joining
         // Users also would get kicked if the command is not handled by the bungee with an npe, but this stops some unneccessary cpu cycles
         if(con.getServer() == null)
         {
             con.disconnect( CHAT_TOO_EARLY_DISCONNECT_REASON );
+            BungeeCord.getInstance().getPluginManager().callEvent( new SuspiciousPlayerBehaviourEvent( con, SuspiciousPlayerBehaviourEvent.Check.CHAT_TOO_EARLY ) );
             return;
         }
 
-- 
1.9.5.msysgit.0

