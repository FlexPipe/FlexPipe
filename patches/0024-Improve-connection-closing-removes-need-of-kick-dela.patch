From 0c14f824eb8b89ca4facfaffeba515512ee04e93 Mon Sep 17 00:00:00 2001
From: Janmm14 <computerjanimaus@yahoo.de>
Date: Mon, 29 Feb 2016 22:14:58 +0100
Subject: Improve connection closing, removes need of kick delay.

Adapted from https://github.com/SpigotMC/BungeeCord/pull/1706 by @kamcio96, he claimed that these channel closing changes are removing the need of delayed kick packets.

Also adapted void promise usage from https://github.com/WaterfallMC/Waterfall/commit/b88c7de33abc0b2ea220b324dd77985628ea81d4 by @minecrafter
---
 .../java/net/md_5/bungee/ServerConnection.java     |  2 +-
 .../main/java/net/md_5/bungee/ServerConnector.java |  7 +++---
 .../main/java/net/md_5/bungee/UserConnection.java  | 13 ++---------
 .../net/md_5/bungee/connection/InitialHandler.java | 19 ++++++---------
 .../net/md_5/bungee/connection/UpstreamBridge.java |  2 +-
 .../java/net/md_5/bungee/netty/ChannelWrapper.java | 27 ++++++++++++++++------
 6 files changed, 35 insertions(+), 35 deletions(-)

diff --git a/proxy/src/main/java/net/md_5/bungee/ServerConnection.java b/proxy/src/main/java/net/md_5/bungee/ServerConnection.java
index 555a193..2304bd8 100644
--- a/proxy/src/main/java/net/md_5/bungee/ServerConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/ServerConnection.java
@@ -54,7 +54,7 @@ public class ServerConnection implements Server
 
         if ( !ch.isClosed() )
         {
-            ch.getHandle().eventLoop().schedule( ( Runnable ) () -> ch.getHandle().close(), 100, TimeUnit.MILLISECONDS );
+            ch.getHandle().eventLoop().schedule( ( Runnable ) ch::close, 100, TimeUnit.MILLISECONDS );
         }
     }
 
diff --git a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
index bc6849c..0cb2ba1 100644
--- a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
+++ b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
@@ -99,7 +99,7 @@ public class ServerConnector extends PacketHandler
             copiedHandshake.setHost( newHost );
         } else if ( !user.getExtraDataInHandshake().isEmpty() )
         {
-            // Only restore the extra data if IP forwarding is off. 
+            // Only restore the extra data if IP forwarding is off.
             // TODO: Add support for this data with IP forwarding.
             copiedHandshake.setHost( copiedHandshake.getHost() + user.getExtraDataInHandshake() );
         }
@@ -230,13 +230,14 @@ public class ServerConnector extends PacketHandler
             user.unsafe().sendPacket( new Respawn( login.getDimension(), login.getDifficulty(), login.getGameMode(), login.getLevelType() ) );
 
             // Remove from old servers
-            user.getServer().disconnect( "Quitting" );
+            user.getServer().setObsolete( true );
+            user.getServer().disconnect();
         }
 
         // TODO: Fix this?
         if ( !user.isActive() )
         {
-            server.disconnect( "Quitting" );
+            server.disconnect();
             // Silly server admins see stack trace and die
             bungee.getLogger().warning( "No client connected for pending server!" );
             return;
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index 5c307ce..894a2f2 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -351,20 +351,11 @@ public final class UserConnection implements ProxiedPlayer
                 getName(), BaseComponent.toLegacyText( reason )
             } );
 
-            // Why do we have to delay this you might ask? Well the simple reason is MOJANG.
-            // Despite many a bug report posted, ever since the 1.7 protocol rewrite, the client STILL has a race condition upon switching protocols.
-            // As such, despite the protocol switch packets already having been sent, there is the possibility of a client side exception
-            // To help combat this we will wait half a second before actually sending the disconnected packet so that whoever is on the other
-            // end has a somewhat better chance of receiving the proper packet.
-            ch.getHandle().eventLoop().schedule( ( Runnable ) () -> {
-                unsafe().sendPacket( new Kick( ComponentSerializer.toString( reason ) ) );
-                ch.close();
-            }, 500, TimeUnit.MILLISECONDS );
-
+            ch.close( new Kick( ComponentSerializer.toString( reason ) ) );
 
             if ( server != null )
             {
-                server.disconnect( "Quitting" );
+                server.disconnect(); //reason is ignored anyway
             }
         }
     }
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index c39ed1a..d809724 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -202,7 +202,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
         if (thisState != expectedState)
         {
             bungee.getLogger().log( Level.WARNING, "{0} Not expecting {1}", new Object[]{ this, expectedState } );
-            disconnect( "Not expecting " + thisState, false );
+            disconnect( "Not expecting " + thisState );
             return false;
         }
         return true;
@@ -543,18 +543,13 @@ public class InitialHandler extends PacketHandler implements PendingConnection
         if ( !disconnecting || !ch.isClosed() )
         {
             disconnecting = true;
-            // Why do we have to delay this you might ask? Well the simple reason is MOJANG.
-            // Despite many a bug report posted, ever since the 1.7 protocol rewrite, the client STILL has a race condition upon switching protocols.
-            // As such, despite the protocol switch packets already having been sent, there is the possibility of a client side exception
-            // To help combat this we will wait half a second before actually sending the disconnected packet so that whoever is on the other
-            // end has a somewhat better chance of receiving the proper packet.
-            ch.getHandle().eventLoop().schedule( ( Runnable ) () -> {
-                if ( thisState != State.STATUS && thisState != State.PING )
-                {
-                    unsafe().sendPacket( new Kick( ComponentSerializer.toString( reason ) ) );
-                }
+            if ( thisState != State.STATUS && thisState != State.PING )
+            {
+                ch.close( new Kick( ComponentSerializer.toString( reason ) ) );
+            } else
+            {
                 ch.close();
-            }, 500, TimeUnit.MILLISECONDS );
+            }
         }
     }
 
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
index 5c66ab8..747b52c 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
@@ -77,7 +77,7 @@ public class UpstreamBridge extends PacketHandler
             {
                 player.unsafe().sendPacket( packet );
             }
-            con.getServer().disconnect( "Quitting" );
+            con.getServer().disconnect();
         }
     }
 
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/ChannelWrapper.java b/proxy/src/main/java/net/md_5/bungee/netty/ChannelWrapper.java
index 06d19c3..4514a21 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/ChannelWrapper.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/ChannelWrapper.java
@@ -1,5 +1,6 @@
 package net.md_5.bungee.netty;
 
+import io.netty.channel.ChannelFutureListener;
 import net.md_5.bungee.compress.PacketCompressor;
 import net.md_5.bungee.compress.PacketDecompressor;
 import net.md_5.bungee.protocol.PacketWrapper;
@@ -38,30 +39,42 @@ public class ChannelWrapper
 
     public void write(Object packet)
     {
-        if ( !closed )
+        if ( !isClosed() )
         {
             if ( packet instanceof PacketWrapper )
             {
                 ( (PacketWrapper) packet ).setReleased( true );
-                ch.write( ( (PacketWrapper) packet ).buf, ch.voidPromise() );
+                ch.writeAndFlush( ( (PacketWrapper) packet ).buf, ch.voidPromise());
             } else
             {
-                ch.write( packet, ch.voidPromise() );
+                ch.writeAndFlush( packet, ch.voidPromise() );
             }
-            ch.flush();
         }
     }
 
     public void close()
     {
-        if ( !closed )
+        if ( !isClosed() )
         {
             closed = true;
-            ch.flush();
-            ch.close();
+            ch.flush().close();
         }
     }
 
+    public void close(Object packet)
+    {
+        if ( !isClosed() )
+        {
+            closed = true;
+            ch.writeAndFlush( packet ).addListeners( ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE, ChannelFutureListener.CLOSE );
+        }
+    }
+
+    public boolean isClosed()
+    {
+        return closed || !ch.isActive();
+    }
+
     public void addBefore(String baseName, String name, ChannelHandler handler)
     {
         Preconditions.checkState( ch.eventLoop().inEventLoop(), "cannot add handler outside of event loop" );
-- 
1.9.5.msysgit.0

